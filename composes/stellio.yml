version: '3.9'
services:
  stellio-kafka:
    image: confluentinc/cp-kafka:7.3.1
    container_name: stellio-kafka
    hostname: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://stellio-kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@stellio-kafka:29093'
      KAFKA_LISTENERS: CONTROLLER://stellio-kafka:29093,PLAINTEXT://stellio-kafka:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
    networks:
      - stellio
    ports:
      - "29092:29092"
    volumes:
      - ./config/kafka/update_run.sh:/tmp/update_run.sh
    command: "bash -c 'if [ ! -f /tmp/update_run.sh ]; then echo \"ERROR: Did you forget the update_run.sh file that came with this docker-compose.yml file?\" && exit 1 ; else /tmp/update_run.sh && /etc/confluent/docker/run ; fi'"
    healthcheck:
      test: nc -z localhost 29092 || exit -1
      start_period: 15s
      interval: 30s
      timeout: 10s
      retries: 3
  stellio-postgres:
    image: stellio/stellio-timescale-postgis:14-2.11.1-3.3
    container_name: stellio-postgres
    hostname: postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASS=${POSTGRES_PASS}
      - POSTGRES_DBNAME=${POSTGRES_DBNAME}
      - POSTGRES_MULTIPLE_EXTENSIONS=postgis,timescaledb,pgcrypto
      - ACCEPT_TIMESCALE_TUNING=TRUE
    networks:
      - stellio
    ports:
      - "5432:5432"
    volumes:
      - stellio-postgres-storage:/var/lib/postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -U stellio"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 10s
  stellio-api-gateway:
    container_name: stellio-api-gateway
    image: stellio/stellio-api-gateway:${STELLIO_DOCKER_TAG}
    hostname: api-gateway
    environment:
      - SPRING_PROFILES_ACTIVE=${ENVIRONMENT}
    networks:
      - stellio
    ports:
      - "8080:8080"
  stellio-search-service:
    container_name: stellio-search-service
    image: stellio/stellio-search-service:${STELLIO_DOCKER_TAG}
    hostname: search-service
    environment:
      - SPRING_PROFILES_ACTIVE=${ENVIRONMENT}
      - SPRING_R2DBC_URL=r2dbc:postgresql://postgres/${STELLIO_SEARCH_DB_DATABASE}
      - SPRING_FLYWAY_URL=jdbc:postgresql://postgres/${STELLIO_SEARCH_DB_DATABASE}
      - SPRING_R2DBC_USERNAME=${POSTGRES_USER}
      - SPRING_R2DBC_PASSWORD=${POSTGRES_PASS}
      - APPLICATION_AUTHENTICATION_ENABLED=${STELLIO_AUTHENTICATION_ENABLED}
      - APPLICATION_TENANTS_0_ISSUER=${APPLICATION_TENANTS_0_ISSUER}
      - APPLICATION_TENANTS_0_URI=${APPLICATION_TENANTS_0_URI}
      - APPLICATION_TENANTS_0_DBSCHEMA=${APPLICATION_TENANTS_0_DBSCHEMA}
    networks:
      - stellio
    ports:
      - "8083:8083"
    depends_on:
      stellio-postgres:
        condition: service_healthy
      stellio-kafka:
        condition: service_started
  stellio-subscription-service:
    container_name: stellio-subscription-service
    image: stellio/stellio-subscription-service:${STELLIO_DOCKER_TAG}
    hostname: subscription-service
    environment:
      - SPRING_PROFILES_ACTIVE=${ENVIRONMENT}
      - SPRING_R2DBC_URL=r2dbc:postgresql://postgres/${STELLIO_SUBSCRIPTION_DB_DATABASE}
      - SPRING_FLYWAY_URL=jdbc:postgresql://postgres/${STELLIO_SUBSCRIPTION_DB_DATABASE}
      - SPRING_R2DBC_USERNAME=${POSTGRES_USER}
      - SPRING_R2DBC_PASSWORD=${POSTGRES_PASS}
      - APPLICATION_AUTHENTICATION_ENABLED=${STELLIO_AUTHENTICATION_ENABLED}
      - APPLICATION_TENANTS_0_ISSUER=${APPLICATION_TENANTS_0_ISSUER}
      - APPLICATION_TENANTS_0_URI=${APPLICATION_TENANTS_0_URI}
      - APPLICATION_TENANTS_0_DBSCHEMA=${APPLICATION_TENANTS_0_DBSCHEMA}
      - SUBSCRIPTION_ENTITY_SERVICE-URL=${SUBSCRIPTION_ENTITY_SERVICE_URL}
      - SUBSCRIPTION_STELLIO_URL=${SUBSCRIPTION_STELLIO_URL}
    networks:
      - stellio
    ports:
      - "8084:8084"
    depends_on:
      stellio-postgres:
        condition: service_healthy
      stellio-kafka:
        condition: service_started

networks:
  stellio:
    labels:
      org.egm: 'tutorial'

volumes:
  stellio-postgres-storage: ~